#!/usr/bin/env bash
#===============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 spelllang=en ft=sh
#===============================================================================
#
#          FILE: box.sh
#
#         USAGE: ./box.sh
#
#   DESCRIPTION:
#
#===============================================================================

set -e          # Exit immediately on error
set -u          # Treat unset variables as an error
set -o pipefail # Prevent errors in a pipeline from being masked
IFS=$'\n\t'     # Set the internal field separator to a tab and newline

# Define variables for current file, directory, and script basename
#readonly __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
#readonly __file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
#readonly __base="$(basename ${__file} .sh)"

###############
#  Functions  #
###############

function echoinfo() {
  local GC="\033[1;32m"
  local EC="\033[0m"
  printf "${GC} ☆  INFO${EC}: %s\n" "$@";
}

function echowarn() {
  local YC="\033[1;33m"
  local EC="\033[0m"
  printf "${YC} ⚠  WARN${EC}: %s\n" "$@";
}

function echodebug() {
  local BC="\033[1;34m"
  local EC="\033[0m"
  if [[ -n ${DEBUG+x} ]]; then
    printf "${BC} ★  DEBUG${EC}: %s\n" "$@";
  fi
}

function echoerror() {
  local RC="\033[1;31m"
  local EC="\033[0m"
  printf "${RC} ✖  ERROR${EC}: %s\n" "$@" 1>&2;
}

# Load the box into vagrant, start it, and destroy it
function load_ssh_destroy() {

  local box_name=$1
  local box_filename="${box_name}.box"
  local box_path="${PACKER_BASE}/box/${box_filename}"
  # shellcheck disable=2155
  local tmp_path=$(mktemp -d)

  echoinfo "Loading ${box_name} located at ${box_path} into vagrant"
  vagrant box add "${box_name}" "${box_path}"

  echoinfo "Generating Vagrantfile and bringing up VM"
  pushd "${tmp_path}"
  vagrant init "${box_name}"
  VAGRANT_LOG=warn vagrant up

  echoinfo "Connecting to Vagrant VM"
  vagrant ssh

  echoinfo "Removing Vagrant VM"
  sleep 10
  vagrant destroy -f
  popd

  echoinfo "Removing box artifact"
  vagrant box remove "${box_name}"
  rm -rf "${tmp_path}"
}

#function cleanup_before_exit () {
  #echodebug "Cleaning up"
#}
#trap cleanup_before_exit EXIT

##########
#  Main  #
##########

function main() {
  case $1 in
    test)
      echoinfo "Running spec tests"
      ;;
    ssh)
      echoinfo "Creating Vagrant VM and connecting via ssh"
      local box_name=$2
      load_ssh_destroy "${box_name}"
      ;;
    *)
      echoinfo "Unknown option"
      ;;
  esac
}

main "$@"
